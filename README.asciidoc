= vivd =

vivd is a development/testing tool for web applications.

Provide vivd with a git ref/revision and it will build & start a docker
container from those sources, and reverse proxy to it.  Containers can be
automatically cleaned up using a Least Recently Used strategy.  Therefore, vivd
provides a way to automatically provision and keep instances of your application
for (for example) the N most recent commits in your repository or code review
system.

== Configuration ==

+data/config.clj+ should contain configuration items as in the following
example:

..............................................................
{
  ; time (in seconds) permitted for HTTP to become responsive
  ; on new containers
  :startup-timeout 60,

  ; header/title displayed on the index page
  :title "Containers",

  ; default number of containers returned in a single request
  ; to API or UI
  :per-page 20,

  ; default URL within container to link to from index page
  ; (e.g., if there is something more useful than "/")
  :default-url "/app",

  ; max number of containers allowed to exist
  :max-containers 200,

  ; max number of containers allowed to be running
  :max-containers-up 4,
  
  ; the git URL used for fetching source
  :git-url "https://github.com/docker-training/webapp.git",
  
  ; the source image used
  :docker-source-image "httpd:2.4",
  
  ; http port within the container
  :docker-http-port 80,
  
  ; location within the container where code shall be placed
  :docker-code-path "/usr/local/apache2/htdocs/code",

  ; ENTRYPOINT and CMD used for built images; can be omitted.
  ; Array form only.
  :docker-entrypoint ["/usr/local/apache2/bin/httpd"],
  :docker-cmd ["-DFOREGROUND"],

  ; Additional arguments passed to `docker run' when starting a container.
  ; Useful for adding volumes or running in privileged mode
  :docker-run-arguments ["--privileged"],

  ; HTTP server configuration
  :http-host "0.0.0.0",
  :http-port 8080,
}
..............................................................

== Image Requirements ==

The requirements on the configured docker image and application include:

- must expose an HTTP port, at +:docker-http-port+ (default 80)

- will have the git working tree (only) from the given revision checked out at
  the configured path

- must start your application on startup; either from its own ENTRYPOINT/CMD
  or from the +:docker-entrypoint+ / +:docker-cmd+ configured for vivd

- should accept HTTP requests within +:startup-timeout+ seconds after starting

== API ==

vivd's API follows the http://jsonapi.org/format/[JSON API] format, version 1.0.

=== Resource type: "containers"

Represents a container for a particular git ref.

Endpoint: `/a/containers`

==== Attributes

  git-ref::
    A git ref to be fetched. MUST be provided on create.

  git-revision::
    A git revision used for the container, which must be accessible from
    the git-ref. MUST be provided on create.

  git-oneline::
    Summary of the git commit (similar to `git log --oneline`).

  status::
    String describing the status of the container.

  timestamp::
    Time when the container was last used, as a string in ISO8601
    extended format.

`git-ref` and `git-revision` are the only two attributes which may be written
via the API, and only when creating a new container.  All other attributes are
read-only in the API.

==== Links

  self::
    The URL of this resource.

  app::
    The base URL of the application within the container, e.g. browse to this
    URL to access the application.

  first::
    Pagination: points to the first page. (Collection only).

  next::
    Pagination: points to the next page. (Collection only).

  prev::
    Pagination: points to the previous page. (Collection only).

All links are absolute.

Clients MUST not assume that a link currently provided as a string will
remain so. Please check whether a link is an object or a string before use.

==== Pagination

Pagination is controlled by the query parameters:

  page[limit]::
    Maximum number of resources to include in the response.
   If omitted, a server default will apply.

  page[offset]::
    Start from this offset, e.g. 20 to skip the first 20 items.

==== Filtering

Basic filtering is possible using the `filter` query parameter.

  filter[*]::
    If a string is provided, only containers with that string contained within
    a subset of their attributes (case-insensitive) will be found.
    (The specific set of attributes is undefined.)

==== Example

From URL `/a/containers?page[limit]=3`:

  {
      "data": [
          {
              "attributes": {
                  "git-oneline": "f85994a WIP add an image for testing\n",
                  "git-ref": "refs/heads/for-test",
                  "git-revision": "f85994a7d8ade072f3942984d9b2117cb939a7df",
                  "status": "up",
                  "timestamp": "2015-08-30T08:29:28.000Z"
              },
              "id": "6lbTpje9",
              "links": {
                  "app": "http://localhost:8080/6lbTpje9/code/",
                  "self": "http://localhost:8080/a/containers/6lbTpje9"
              },
              "type": "containers"
          },
          {
              "attributes": {
                  "git-oneline": "5f29fe0 Make index page nicer.\n",
                  "git-ref": "refs/heads/master",
                  "git-revision": "5f29fe0408730f2aece306ef6b2c7479a28cd535",
                  "status": "stopped",
                  "timestamp": "2015-08-29T22:53:54.000Z"
              },
              "id": "Q8pLcQMn",
              "links": {
                  "app": "http://localhost:8080/Q8pLcQMn/code/",
                  "self": "http://localhost:8080/a/containers/Q8pLcQMn"
              },
              "type": "containers"
          },
          {
              "attributes": {
                  "git-oneline": "5f29fe0 Make index page nicer.\n",
                  "git-ref": "refs/heads/master",
                  "git-revision": "5f29fe0408730f2aece306ef6b2c7479a28cd535",
                  "status": "timed-out",
                  "timestamp": "2015-08-29T00:57:54.000Z"
              },
              "id": "tKdQ3AGf",
              "links": {
                  "app": "http://localhost:8080/tKdQ3AGf/code/",
                  "self": "http://localhost:8080/a/containers/tKdQ3AGf"
              },
              "type": "containers"
          }
      ],
      "links": {
          "first": "http://localhost:8080/a/containers?page[offset]=0&page[limit]=3",
          "next": {
              "href": "http://localhost:8080/a/containers?page[offset]=3&page[limit]=3",
              "meta": {
                  "query-params": {
                      "page[offset]": 3
                  }
              }
          },
          "prev": null,
          "self": "http://localhost:8080/a/containers?page[offset]=0&page[limit]=3"
      }
  }

=== Extensions

==== Errors meta

Error objects may contain these keys under `meta`:

  validation-errors::
    If an error occurred because a request or response failed JSON API
    validation, this will be a string providing some information about
    what failed to validate. Hopefully, but not always, human-readable.

==== Links meta

Link objects may contain these keys under `meta`:

  query-params::
    If present, this link can also be assembled by starting with the URL
    of the current document and setting each query parameter according to
    the contents of this object.
